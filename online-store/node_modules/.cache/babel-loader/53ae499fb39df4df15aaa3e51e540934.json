{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { gql, ApolloClient, InMemoryCache } from '@apollo/client';\nimport { GET_CURRENCY } from \"../components/graphql/getCurrency\";\nexport const fetchCurrency = createAsyncThunk(\"currency/fetchCurrency\", async function (_, _ref) {\n  let {\n    rejectWithValue\n  } = _ref;\n\n  try {\n    const client = new ApolloClient({\n      uri: 'http://localhost:4000/',\n      cache: new InMemoryCache()\n    }); // const GET_CURRENCY = gql`\n    //  query Query {\n    //     currencies {\n    //         label\n    //         symbol\n    //     }\n    // }`;\n\n    const response = await client.query({\n      query: GET_CURRENCY\n    }).then(result => {\n      return result.data.currencies;\n    }).catch(error => {\n      throw new Error(\"Something went wrong...\");\n    });\n    console.log(response);\n    return response;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const currencySlice = createSlice({\n  name: \"currency\",\n  initialState: {\n    currencies: [],\n    currency: \"$\",\n    status: null,\n    error: null\n  },\n  reducers: {\n    updateCurrency: (state, action) => {\n      state.currency = action.payload;\n    }\n  },\n  extraReducers: {\n    [fetchCurrency.pending]: state => {\n      state.status = \"loading\";\n      state.error = null;\n    },\n    [fetchCurrency.fulfilled]: (state, action) => {\n      state.status = \"resolved\";\n      state.currencies = action.payload;\n    },\n    [fetchCurrency.rejected]: (state, action) => {\n      state.status = \"rejected\";\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  updateCurrency\n} = currencySlice.actions;\nexport default currencySlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","gql","ApolloClient","InMemoryCache","GET_CURRENCY","fetchCurrency","_","rejectWithValue","client","uri","cache","response","query","then","result","data","currencies","catch","error","Error","console","log","message","currencySlice","name","initialState","currency","status","reducers","updateCurrency","state","action","payload","extraReducers","pending","fulfilled","rejected","actions","reducer"],"sources":["H:/Svetik/qa-testing/Scandiweb/volkotrub-shop-project/src/store/currency.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { gql, ApolloClient, InMemoryCache } from '@apollo/client';\r\nimport { GET_CURRENCY } from \"../components/graphql/getCurrency\";\r\n\r\nexport const fetchCurrency = createAsyncThunk(\r\n    \"currency/fetchCurrency\",\r\n    async function (_, { rejectWithValue }) {\r\n        try {\r\n            const client = new ApolloClient({ uri: 'http://localhost:4000/', cache: new InMemoryCache(), });\r\n            // const GET_CURRENCY = gql`\r\n            //  query Query {\r\n            //     currencies {\r\n            //         label\r\n            //         symbol\r\n            //     }\r\n            // }`;\r\n            const response = await client.query({ query: GET_CURRENCY }).then((result) => {\r\n                return result.data.currencies;\r\n            }).catch((error) => { throw new Error(\"Something went wrong...\"); });\r\n            console.log(response);\r\n            return response;\r\n        } catch (error) { return rejectWithValue(error.message); }\r\n    }\r\n);\r\n\r\n\r\nexport const currencySlice = createSlice({\r\n    name: \"currency\",\r\n    initialState: {\r\n        currencies: [],\r\n        currency: \"$\",\r\n        status: null,\r\n        error: null,\r\n    },\r\n    reducers: {\r\n        updateCurrency: (state, action) => {\r\n            state.currency = action.payload;  \r\n        }\r\n    },\r\n    extraReducers: {\r\n        [fetchCurrency.pending]: (state) => { \r\n            state.status = \"loading\";\r\n            state.error = null;\r\n        },\r\n        [fetchCurrency.fulfilled]: (state, action) => { \r\n            state.status = \"resolved\";\r\n            state.currencies = action.payload;\r\n        },\r\n        [fetchCurrency.rejected]: (state, action) => {\r\n            state.status = \"rejected\";\r\n            state.error = action.payload;\r\n        },\r\n    }\r\n});\r\n\r\nexport const { updateCurrency } = currencySlice.actions;\r\n\r\nexport default currencySlice.reducer;"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,GAAT,EAAcC,YAAd,EAA4BC,aAA5B,QAAiD,gBAAjD;AACA,SAASC,YAAT,QAA6B,mCAA7B;AAEA,OAAO,MAAMC,aAAa,GAAGL,gBAAgB,CACzC,wBADyC,EAEzC,gBAAgBM,CAAhB,QAAwC;EAAA,IAArB;IAAEC;EAAF,CAAqB;;EACpC,IAAI;IACA,MAAMC,MAAM,GAAG,IAAIN,YAAJ,CAAiB;MAAEO,GAAG,EAAE,wBAAP;MAAiCC,KAAK,EAAE,IAAIP,aAAJ;IAAxC,CAAjB,CAAf,CADA,CAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IACA,MAAMQ,QAAQ,GAAG,MAAMH,MAAM,CAACI,KAAP,CAAa;MAAEA,KAAK,EAAER;IAAT,CAAb,EAAsCS,IAAtC,CAA4CC,MAAD,IAAY;MAC1E,OAAOA,MAAM,CAACC,IAAP,CAAYC,UAAnB;IACH,CAFsB,EAEpBC,KAFoB,CAEbC,KAAD,IAAW;MAAE,MAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;IAA6C,CAF5C,CAAvB;IAGAC,OAAO,CAACC,GAAR,CAAYV,QAAZ;IACA,OAAOA,QAAP;EACH,CAdD,CAcE,OAAOO,KAAP,EAAc;IAAE,OAAOX,eAAe,CAACW,KAAK,CAACI,OAAP,CAAtB;EAAwC;AAC7D,CAlBwC,CAAtC;AAsBP,OAAO,MAAMC,aAAa,GAAGxB,WAAW,CAAC;EACrCyB,IAAI,EAAE,UAD+B;EAErCC,YAAY,EAAE;IACVT,UAAU,EAAE,EADF;IAEVU,QAAQ,EAAE,GAFA;IAGVC,MAAM,EAAE,IAHE;IAIVT,KAAK,EAAE;EAJG,CAFuB;EAQrCU,QAAQ,EAAE;IACNC,cAAc,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAC/BD,KAAK,CAACJ,QAAN,GAAiBK,MAAM,CAACC,OAAxB;IACH;EAHK,CAR2B;EAarCC,aAAa,EAAE;IACX,CAAC5B,aAAa,CAAC6B,OAAf,GAA0BJ,KAAD,IAAW;MAChCA,KAAK,CAACH,MAAN,GAAe,SAAf;MACAG,KAAK,CAACZ,KAAN,GAAc,IAAd;IACH,CAJU;IAKX,CAACb,aAAa,CAAC8B,SAAf,GAA2B,CAACL,KAAD,EAAQC,MAAR,KAAmB;MAC1CD,KAAK,CAACH,MAAN,GAAe,UAAf;MACAG,KAAK,CAACd,UAAN,GAAmBe,MAAM,CAACC,OAA1B;IACH,CARU;IASX,CAAC3B,aAAa,CAAC+B,QAAf,GAA0B,CAACN,KAAD,EAAQC,MAAR,KAAmB;MACzCD,KAAK,CAACH,MAAN,GAAe,UAAf;MACAG,KAAK,CAACZ,KAAN,GAAca,MAAM,CAACC,OAArB;IACH;EAZU;AAbsB,CAAD,CAAjC;AA6BP,OAAO,MAAM;EAAEH;AAAF,IAAqBN,aAAa,CAACc,OAAzC;AAEP,eAAed,aAAa,CAACe,OAA7B"},"metadata":{},"sourceType":"module"}