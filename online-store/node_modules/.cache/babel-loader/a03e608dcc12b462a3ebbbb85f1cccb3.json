{"ast":null,"code":"var _jsxFileName = \"H:\\\\Svetik\\\\qa-testing\\\\Scandiweb\\\\volkotrub-shop-project\\\\src\\\\other-components-and-functions\\\\categoryQuery.js\";\nimport { gql, ApolloClient, InMemoryCache } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function categoryQuery(props) {\n  const client = new ApolloClient({\n    uri: 'http://localhost:4000/',\n    cache: new InMemoryCache()\n  });\n  const GET_CATEGORY = gql`\n        query Query {\n  category(input: { title: \"${props}\" }) {\n    name\n    \n    products {\n      id\n      \n      name\n      inStock\n      gallery\n      description\n      category\n      attributes {\n        id\n        \n        name\n        type\n        items {\n          displayValue\n          \n          value\n          id\n        }\n      }\n      prices {\n        currency {\n          symbol\n          \n          label\n        }\n        amount\n        \n      }\n      brand\n    }\n  }\n  currencies {\n    label\n    \n    symbol\n  }\n} `; // const response = {\n  //     data: [],\n  //     loading: false,\n  //     error: null,\n  // }\n\n  let response = [];\n\n  async function fetchData() {\n    try {\n      let dataResponse = await client.query({\n        query: GET_CATEGORY\n      }).then(result => {\n        // console.log(result);\n        // response.data = result.data.category.products;\n        // response.loading = false;\n        response = result.data.category.products;\n        return response; // },\n        //     (error) => {\n        //         console.log(error);\n        //         return <div>Something went wrong</div>\n      });\n      console.log(\"from try\");\n      console.log(dataResponse);\n    } catch (error) {\n      console.log(error);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Something went wrong\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 20\n      }, this);\n    }\n\n    return dataResponse;\n  }\n\n  fetchData();\n  console.log(\"return from function\");\n  console.log(dataResponse);\n}","map":{"version":3,"names":["gql","ApolloClient","InMemoryCache","categoryQuery","props","client","uri","cache","GET_CATEGORY","response","fetchData","dataResponse","query","then","result","data","category","products","console","log","error"],"sources":["H:/Svetik/qa-testing/Scandiweb/volkotrub-shop-project/src/other-components-and-functions/categoryQuery.js"],"sourcesContent":["import { gql, ApolloClient, InMemoryCache } from '@apollo/client';\r\n\r\nexport default function categoryQuery(props) {\r\n    const client = new ApolloClient({\r\n  uri: 'http://localhost:4000/',\r\n  cache: new InMemoryCache(),\r\n        });\r\n        const GET_CATEGORY = gql`\r\n        query Query {\r\n  category(input: { title: \"${props}\" }) {\r\n    name\r\n    \r\n    products {\r\n      id\r\n      \r\n      name\r\n      inStock\r\n      gallery\r\n      description\r\n      category\r\n      attributes {\r\n        id\r\n        \r\n        name\r\n        type\r\n        items {\r\n          displayValue\r\n          \r\n          value\r\n          id\r\n        }\r\n      }\r\n      prices {\r\n        currency {\r\n          symbol\r\n          \r\n          label\r\n        }\r\n        amount\r\n        \r\n      }\r\n      brand\r\n    }\r\n  }\r\n  currencies {\r\n    label\r\n    \r\n    symbol\r\n  }\r\n} `;\r\n    // const response = {\r\n    //     data: [],\r\n    //     loading: false,\r\n    //     error: null,\r\n    // }\r\n    let response = [];\r\n    async function fetchData() {\r\n        try {\r\n            let dataResponse = await client.query({ query: GET_CATEGORY }).then((result) => {\r\n                // console.log(result);\r\n                // response.data = result.data.category.products;\r\n                // response.loading = false;\r\n                response = result.data.category.products;\r\n                return response;\r\n                // },\r\n                //     (error) => {\r\n                //         console.log(error);\r\n                //         return <div>Something went wrong</div>\r\n            });\r\n            console.log(\"from try\");\r\n            console.log(dataResponse);\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n            return <div>Something went wrong</div>\r\n        }\r\n        return dataResponse;\r\n    }\r\n    fetchData();\r\n\r\n    console.log(\"return from function\");\r\n    console.log(dataResponse);\r\n}"],"mappings":";AAAA,SAASA,GAAT,EAAcC,YAAd,EAA4BC,aAA5B,QAAiD,gBAAjD;;AAEA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;EACzC,MAAMC,MAAM,GAAG,IAAIJ,YAAJ,CAAiB;IAClCK,GAAG,EAAE,wBAD6B;IAElCC,KAAK,EAAE,IAAIL,aAAJ;EAF2B,CAAjB,CAAf;EAII,MAAMM,YAAY,GAAGR,GAAI;AACjC;AACA,8BAA8BI,KAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GA1CQ,CALqC,CAgDzC;EACA;EACA;EACA;EACA;;EACA,IAAIK,QAAQ,GAAG,EAAf;;EACA,eAAeC,SAAf,GAA2B;IACvB,IAAI;MACA,IAAIC,YAAY,GAAG,MAAMN,MAAM,CAACO,KAAP,CAAa;QAAEA,KAAK,EAAEJ;MAAT,CAAb,EAAsCK,IAAtC,CAA4CC,MAAD,IAAY;QAC5E;QACA;QACA;QACAL,QAAQ,GAAGK,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAqBC,QAAhC;QACA,OAAOR,QAAP,CAL4E,CAM5E;QACA;QACA;QACA;MACH,CAVwB,CAAzB;MAWAS,OAAO,CAACC,GAAR,CAAY,UAAZ;MACAD,OAAO,CAACC,GAAR,CAAYR,YAAZ;IACH,CAdD,CAeA,OAAOS,KAAP,EAAc;MACVF,OAAO,CAACC,GAAR,CAAYC,KAAZ;MACA,oBAAO;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAP;IACH;;IACD,OAAOT,YAAP;EACH;;EACDD,SAAS;EAETQ,OAAO,CAACC,GAAR,CAAY,sBAAZ;EACAD,OAAO,CAACC,GAAR,CAAYR,YAAZ;AACH"},"metadata":{},"sourceType":"module"}