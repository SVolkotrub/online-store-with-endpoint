{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport fetchCurrency from \"../other-components-and-functions/fetchCurrency\"; // import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n// import { gql, ApolloClient, InMemoryCache } from '@apollo/client';\n// export const fetchCurrency = createAsyncThunk(\n//     \"currency/fetchCurrency\",\n//     async function (_, { rejectWithValue }) {\n//         try {\n//             const client = new ApolloClient({ uri: 'http://localhost:4000/', cache: new InMemoryCache(), });\n//             const GET_CURRENCY = gql`\n//              query Query {\n//                 currencies {\n//                     label\n//                     symbol\n//                 }\n//             }`;\n//             const response = await client.query({ query: GET_CURRENCY }).then((result) => {\n//                 return result.data.currencies;\n//             }).catch((error) => { throw new Error(\"Something went wrong...\"); });\n//             console.log(response);\n//             return response;\n//         } catch (error) { return rejectWithValue(error.message); }\n//     }\n// );\n\nexport const currencySlice = createSlice({\n  name: \"currency\",\n  initialState: {\n    currencies: [],\n    currency: \"$\",\n    status: null,\n    error: null\n  },\n  reducers: {\n    updateCurrency: (state, action) => {\n      state.currency = action.payload;\n    }\n  },\n  extraReducers: {\n    [fetchCurrency.pending]: state => {\n      state.status = \"loading\";\n      state.error = null;\n    },\n    [fetchCurrency.fulfilled]: (state, action) => {\n      state.status = \"resolved\";\n      state.currencies = action.payload;\n    },\n    [fetchCurrency.rejected]: (state, action) => {\n      state.status = \"rejected\";\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  updateCurrency\n} = currencySlice.actions;\nexport default currencySlice.reducer;","map":{"version":3,"names":["createSlice","fetchCurrency","currencySlice","name","initialState","currencies","currency","status","error","reducers","updateCurrency","state","action","payload","extraReducers","pending","fulfilled","rejected","actions","reducer"],"sources":["H:/Svetik/qa-testing/Scandiweb/volkotrub-shop-project/src/store/currency.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport fetchCurrency from \"../other-components-and-functions/fetchCurrency\";\r\n// import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n// import { gql, ApolloClient, InMemoryCache } from '@apollo/client';\r\n\r\n// export const fetchCurrency = createAsyncThunk(\r\n//     \"currency/fetchCurrency\",\r\n//     async function (_, { rejectWithValue }) {\r\n//         try {\r\n//             const client = new ApolloClient({ uri: 'http://localhost:4000/', cache: new InMemoryCache(), });\r\n//             const GET_CURRENCY = gql`\r\n//              query Query {\r\n//                 currencies {\r\n//                     label\r\n//                     symbol\r\n//                 }\r\n//             }`;\r\n//             const response = await client.query({ query: GET_CURRENCY }).then((result) => {\r\n//                 return result.data.currencies;\r\n//             }).catch((error) => { throw new Error(\"Something went wrong...\"); });\r\n//             console.log(response);\r\n//             return response;\r\n//         } catch (error) { return rejectWithValue(error.message); }\r\n//     }\r\n// );\r\n\r\n\r\nexport const currencySlice = createSlice({\r\n    name: \"currency\",\r\n    initialState: {\r\n        currencies: [],\r\n        currency: \"$\",\r\n        status: null,\r\n        error: null,\r\n    },\r\n    reducers: {\r\n        updateCurrency: (state, action) => {\r\n            state.currency = action.payload;  \r\n        }\r\n    },\r\n    extraReducers: {\r\n        [fetchCurrency.pending]: (state) => { \r\n            state.status = \"loading\";\r\n            state.error = null;\r\n        },\r\n        [fetchCurrency.fulfilled]: (state, action) => { \r\n            state.status = \"resolved\";\r\n            state.currencies = action.payload;\r\n        },\r\n        [fetchCurrency.rejected]: (state, action) => {\r\n            state.status = \"rejected\";\r\n            state.error = action.payload;\r\n        },\r\n    }\r\n});\r\n\r\nexport const { updateCurrency } = currencySlice.actions;\r\n\r\nexport default currencySlice.reducer;"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,aAAP,MAA0B,iDAA1B,C,CACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAMC,aAAa,GAAGF,WAAW,CAAC;EACrCG,IAAI,EAAE,UAD+B;EAErCC,YAAY,EAAE;IACVC,UAAU,EAAE,EADF;IAEVC,QAAQ,EAAE,GAFA;IAGVC,MAAM,EAAE,IAHE;IAIVC,KAAK,EAAE;EAJG,CAFuB;EAQrCC,QAAQ,EAAE;IACNC,cAAc,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAC/BD,KAAK,CAACL,QAAN,GAAiBM,MAAM,CAACC,OAAxB;IACH;EAHK,CAR2B;EAarCC,aAAa,EAAE;IACX,CAACb,aAAa,CAACc,OAAf,GAA0BJ,KAAD,IAAW;MAChCA,KAAK,CAACJ,MAAN,GAAe,SAAf;MACAI,KAAK,CAACH,KAAN,GAAc,IAAd;IACH,CAJU;IAKX,CAACP,aAAa,CAACe,SAAf,GAA2B,CAACL,KAAD,EAAQC,MAAR,KAAmB;MAC1CD,KAAK,CAACJ,MAAN,GAAe,UAAf;MACAI,KAAK,CAACN,UAAN,GAAmBO,MAAM,CAACC,OAA1B;IACH,CARU;IASX,CAACZ,aAAa,CAACgB,QAAf,GAA0B,CAACN,KAAD,EAAQC,MAAR,KAAmB;MACzCD,KAAK,CAACJ,MAAN,GAAe,UAAf;MACAI,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACC,OAArB;IACH;EAZU;AAbsB,CAAD,CAAjC;AA6BP,OAAO,MAAM;EAAEH;AAAF,IAAqBR,aAAa,CAACgB,OAAzC;AAEP,eAAehB,aAAa,CAACiB,OAA7B"},"metadata":{},"sourceType":"module"}